// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_01ADDRESS_MEETUP_ADDRESS_H_
#define FLATBUFFERS_GENERATED_01ADDRESS_MEETUP_ADDRESS_H_

#include "flatbuffers/flatbuffers.h"

namespace Meetup {
namespace Address {

struct Address;

struct Person;

inline const flatbuffers::TypeTable *AddressTypeTable();

inline const flatbuffers::TypeTable *PersonTypeTable();

struct Address FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return AddressTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_APARTMENT = 4,
    VT_BUILDING = 6,
    VT_STREETADDRESS = 8,
    VT_AREA = 10,
    VT_LANDMARK = 12,
    VT_CITY = 14,
    VT_COUNTRY = 16,
    VT_POSTALCODE = 18
  };
  const flatbuffers::String *apartment() const {
    return GetPointer<const flatbuffers::String *>(VT_APARTMENT);
  }
  const flatbuffers::String *building() const {
    return GetPointer<const flatbuffers::String *>(VT_BUILDING);
  }
  const flatbuffers::String *streetAddress() const {
    return GetPointer<const flatbuffers::String *>(VT_STREETADDRESS);
  }
  const flatbuffers::String *area() const {
    return GetPointer<const flatbuffers::String *>(VT_AREA);
  }
  const flatbuffers::String *landmark() const {
    return GetPointer<const flatbuffers::String *>(VT_LANDMARK);
  }
  const flatbuffers::String *city() const {
    return GetPointer<const flatbuffers::String *>(VT_CITY);
  }
  const flatbuffers::String *country() const {
    return GetPointer<const flatbuffers::String *>(VT_COUNTRY);
  }
  const flatbuffers::String *postalCode() const {
    return GetPointer<const flatbuffers::String *>(VT_POSTALCODE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_APARTMENT) &&
           verifier.VerifyString(apartment()) &&
           VerifyOffset(verifier, VT_BUILDING) &&
           verifier.VerifyString(building()) &&
           VerifyOffset(verifier, VT_STREETADDRESS) &&
           verifier.VerifyString(streetAddress()) &&
           VerifyOffset(verifier, VT_AREA) &&
           verifier.VerifyString(area()) &&
           VerifyOffset(verifier, VT_LANDMARK) &&
           verifier.VerifyString(landmark()) &&
           VerifyOffset(verifier, VT_CITY) &&
           verifier.VerifyString(city()) &&
           VerifyOffset(verifier, VT_COUNTRY) &&
           verifier.VerifyString(country()) &&
           VerifyOffset(verifier, VT_POSTALCODE) &&
           verifier.VerifyString(postalCode()) &&
           verifier.EndTable();
  }
};

struct AddressBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_apartment(flatbuffers::Offset<flatbuffers::String> apartment) {
    fbb_.AddOffset(Address::VT_APARTMENT, apartment);
  }
  void add_building(flatbuffers::Offset<flatbuffers::String> building) {
    fbb_.AddOffset(Address::VT_BUILDING, building);
  }
  void add_streetAddress(flatbuffers::Offset<flatbuffers::String> streetAddress) {
    fbb_.AddOffset(Address::VT_STREETADDRESS, streetAddress);
  }
  void add_area(flatbuffers::Offset<flatbuffers::String> area) {
    fbb_.AddOffset(Address::VT_AREA, area);
  }
  void add_landmark(flatbuffers::Offset<flatbuffers::String> landmark) {
    fbb_.AddOffset(Address::VT_LANDMARK, landmark);
  }
  void add_city(flatbuffers::Offset<flatbuffers::String> city) {
    fbb_.AddOffset(Address::VT_CITY, city);
  }
  void add_country(flatbuffers::Offset<flatbuffers::String> country) {
    fbb_.AddOffset(Address::VT_COUNTRY, country);
  }
  void add_postalCode(flatbuffers::Offset<flatbuffers::String> postalCode) {
    fbb_.AddOffset(Address::VT_POSTALCODE, postalCode);
  }
  explicit AddressBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  AddressBuilder &operator=(const AddressBuilder &);
  flatbuffers::Offset<Address> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Address>(end);
    return o;
  }
};

inline flatbuffers::Offset<Address> CreateAddress(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> apartment = 0,
    flatbuffers::Offset<flatbuffers::String> building = 0,
    flatbuffers::Offset<flatbuffers::String> streetAddress = 0,
    flatbuffers::Offset<flatbuffers::String> area = 0,
    flatbuffers::Offset<flatbuffers::String> landmark = 0,
    flatbuffers::Offset<flatbuffers::String> city = 0,
    flatbuffers::Offset<flatbuffers::String> country = 0,
    flatbuffers::Offset<flatbuffers::String> postalCode = 0) {
  AddressBuilder builder_(_fbb);
  builder_.add_postalCode(postalCode);
  builder_.add_country(country);
  builder_.add_city(city);
  builder_.add_landmark(landmark);
  builder_.add_area(area);
  builder_.add_streetAddress(streetAddress);
  builder_.add_building(building);
  builder_.add_apartment(apartment);
  return builder_.Finish();
}

inline flatbuffers::Offset<Address> CreateAddressDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *apartment = nullptr,
    const char *building = nullptr,
    const char *streetAddress = nullptr,
    const char *area = nullptr,
    const char *landmark = nullptr,
    const char *city = nullptr,
    const char *country = nullptr,
    const char *postalCode = nullptr) {
  auto apartment__ = apartment ? _fbb.CreateString(apartment) : 0;
  auto building__ = building ? _fbb.CreateString(building) : 0;
  auto streetAddress__ = streetAddress ? _fbb.CreateString(streetAddress) : 0;
  auto area__ = area ? _fbb.CreateString(area) : 0;
  auto landmark__ = landmark ? _fbb.CreateString(landmark) : 0;
  auto city__ = city ? _fbb.CreateString(city) : 0;
  auto country__ = country ? _fbb.CreateString(country) : 0;
  auto postalCode__ = postalCode ? _fbb.CreateString(postalCode) : 0;
  return Meetup::Address::CreateAddress(
      _fbb,
      apartment__,
      building__,
      streetAddress__,
      area__,
      landmark__,
      city__,
      country__,
      postalCode__);
}

struct Person FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return PersonTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_AGE = 6,
    VT_ADDRESSES = 8,
    VT_PHONES = 10
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  int32_t age() const {
    return GetField<int32_t>(VT_AGE, 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<Meetup::Address::Address>> *addresses() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Meetup::Address::Address>> *>(VT_ADDRESSES);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *phones() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_PHONES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<int32_t>(verifier, VT_AGE) &&
           VerifyOffset(verifier, VT_ADDRESSES) &&
           verifier.VerifyVector(addresses()) &&
           verifier.VerifyVectorOfTables(addresses()) &&
           VerifyOffset(verifier, VT_PHONES) &&
           verifier.VerifyVector(phones()) &&
           verifier.VerifyVectorOfStrings(phones()) &&
           verifier.EndTable();
  }
};

struct PersonBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(Person::VT_NAME, name);
  }
  void add_age(int32_t age) {
    fbb_.AddElement<int32_t>(Person::VT_AGE, age, 0);
  }
  void add_addresses(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Meetup::Address::Address>>> addresses) {
    fbb_.AddOffset(Person::VT_ADDRESSES, addresses);
  }
  void add_phones(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> phones) {
    fbb_.AddOffset(Person::VT_PHONES, phones);
  }
  explicit PersonBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PersonBuilder &operator=(const PersonBuilder &);
  flatbuffers::Offset<Person> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Person>(end);
    return o;
  }
};

inline flatbuffers::Offset<Person> CreatePerson(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    int32_t age = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Meetup::Address::Address>>> addresses = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> phones = 0) {
  PersonBuilder builder_(_fbb);
  builder_.add_phones(phones);
  builder_.add_addresses(addresses);
  builder_.add_age(age);
  builder_.add_name(name);
  return builder_.Finish();
}

inline flatbuffers::Offset<Person> CreatePersonDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    int32_t age = 0,
    const std::vector<flatbuffers::Offset<Meetup::Address::Address>> *addresses = nullptr,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *phones = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto addresses__ = addresses ? _fbb.CreateVector<flatbuffers::Offset<Meetup::Address::Address>>(*addresses) : 0;
  auto phones__ = phones ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*phones) : 0;
  return Meetup::Address::CreatePerson(
      _fbb,
      name__,
      age,
      addresses__,
      phones__);
}

inline const flatbuffers::TypeTable *AddressTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 }
  };
  static const char * const names[] = {
    "apartment",
    "building",
    "streetAddress",
    "area",
    "landmark",
    "city",
    "country",
    "postalCode"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 8, type_codes, nullptr, nullptr, names
  };
  return &tt;
}

inline const flatbuffers::TypeTable *PersonTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_INT, 0, -1 },
    { flatbuffers::ET_SEQUENCE, 1, 0 },
    { flatbuffers::ET_STRING, 1, -1 }
  };
  static const flatbuffers::TypeFunction type_refs[] = {
    Meetup::Address::AddressTypeTable
  };
  static const char * const names[] = {
    "name",
    "age",
    "addresses",
    "phones"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 4, type_codes, type_refs, nullptr, names
  };
  return &tt;
}

inline const Meetup::Address::Person *GetPerson(const void *buf) {
  return flatbuffers::GetRoot<Meetup::Address::Person>(buf);
}

inline const Meetup::Address::Person *GetSizePrefixedPerson(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Meetup::Address::Person>(buf);
}

inline bool VerifyPersonBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Meetup::Address::Person>(nullptr);
}

inline bool VerifySizePrefixedPersonBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Meetup::Address::Person>(nullptr);
}

inline void FinishPersonBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Meetup::Address::Person> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedPersonBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Meetup::Address::Person> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Address
}  // namespace Meetup

#endif  // FLATBUFFERS_GENERATED_01ADDRESS_MEETUP_ADDRESS_H_
